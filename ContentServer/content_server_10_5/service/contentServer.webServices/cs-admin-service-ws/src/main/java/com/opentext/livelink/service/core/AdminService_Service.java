package com.opentext.livelink.service.core;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.2
 * 2015-08-13T14:04:56.673-07:00
 * Generated source version: 3.1.2
 * 
 */
@WebServiceClient(name = "AdminService", 
                  wsdlLocation = "file:/C:/Users/rhyse/Desktop/Content%20Server%20For%20AW16/code/contentServer.webServices/cs-admin-service-ws/src/main/resources/AdminService.wsdl",
                  targetNamespace = "urn:Core.service.livelink.opentext.com") 
public class AdminService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:Core.service.livelink.opentext.com", "AdminService");
    public final static QName BasicHttpBindingAdminService = new QName("urn:Core.service.livelink.opentext.com", "BasicHttpBinding_AdminService");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/rhyse/Desktop/Content%20Server%20For%20AW16/code/contentServer.webServices/cs-admin-service-ws/src/main/resources/AdminService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AdminService_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/rhyse/Desktop/Content%20Server%20For%20AW16/code/contentServer.webServices/cs-admin-service-ws/src/main/resources/AdminService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AdminService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AdminService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AdminService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public AdminService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AdminService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AdminService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns AdminService
     */
    @WebEndpoint(name = "BasicHttpBinding_AdminService")
    public AdminService getBasicHttpBindingAdminService() {
        return super.getPort(BasicHttpBindingAdminService, AdminService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdminService
     */
    @WebEndpoint(name = "BasicHttpBinding_AdminService")
    public AdminService getBasicHttpBindingAdminService(WebServiceFeature... features) {
        return super.getPort(BasicHttpBindingAdminService, AdminService.class, features);
    }

}
